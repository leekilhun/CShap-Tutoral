
#include "inc/MarlinConfig.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

void stop();

// Pass true to keep steppers from timing out
void idle();
inline void idle_no_sleep() { idle(); }

/**
 * The axis order in all axis related arrays is X, Y, Z, E
 */
void enable_e_steppers();
void enable_all_steppers();
void disable_e_stepper(const uint8_t e);
void disable_e_steppers();
void disable_all_steppers();

void kill(const char * const lcd_error=nullptr, const char * const lcd_component=nullptr, const bool steppers_off=false);
void minkill(const bool steppers_off=false);

void quickstop_stepper();

// Global State of the firmware
enum MarlinState : uint8_t {
  MF_INITIALIZING  =  0,
  MF_RUNNING      = 1, //_BV(0),  //#define _BV(b) (1UL << (b))
  MF_PAUSED        = 2, //_BV(1),
  MF_WAITING       = 4, //_BV(2),
  MF_STOPPED       = 8, //_BV(3),
  MF_SD_COMPLETE  = 16,//_BV(4),
  MF_KILLED       = 64     //_BV(7)
};
extern MarlinState marlin_state;  // MarlineState를 extern으로 선언


inline bool IsRunning() { return marlin_state == MF_RUNNING; }
inline bool IsStopped() { return marlin_state != MF_RUNNING; }

bool printingIsActive();
bool printingIsPaused();
void startOrResumeJob();

extern bool wait_for_heatup; // 전역 변수로 선언

extern bool wait_for_user;
void wait_for_user_response(millis_t ms=0, const bool no_sleep=false);

bool pin_is_protected(const pin_t pin);
void protected_pin_err();

-----------------------------------------------------------------------------------------------------------------------------
 매크로 TERN_ 변환하는 매크로 같은데
 - 인자 매크로  TERN_(O,A) 는  ADVANCED... define되어있으면 bool no_stepper... 인스턴스 또는 null로 변환 
 - TERN_(O,A)   _TERN(_ENA_1(O),,A)     // OPTION converted to A or '<null>'  옵션이 A또는  null로 변환 
  #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))  
       이건 enable 
    ->#define _ISENA(V...)      IS_PROBE(V)
    ->#define IS_PROBE(V...)  SECOND(V, 0)     // 전달 된 두번째 항목을 가져오거나 0으로 


     #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
     #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
     #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.





extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
                  SP_A_STR[], SP_B_STR[], SP_C_STR[],
                  SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[],
                  X_LBL[], Y_LBL[], Z_LBL[], E_LBL[], SP_X_LBL[], SP_Y_LBL[], SP_Z_LBL[], SP_E_LBL[];
